return(out)
}
autoreg_fast <- function(n,rho)
{
out <- numeric(length = n)
out[1] <- 0
for(t in 2:n)
{
error <- rnorm(1)
error <- rho*out[t-1] + error
out[t] <- error
}
return(out)
}
print(autoreg(10,0.5))
print(autoreg_fast(10,0.5))
benchmark({
autoreg <- function(n,rho)
{
out <- 0
for(t in 2:n)
{
error <- rnorm(1)
error <- rho*out[t-1] + error
out <- c(out,error)
}
return(out)
}
},{
autoreg_fast <- function(n,rho)
{
out <- numeric(length = n)
out[1] <- 0
for(t in 2:n)
{
error <- rnorm(1)
error <- rho*out[t-1] + error
out[t] <- error
}
return(out)
}
},replications = 20)
benchmark({
autoreg <- function(n,rho)
{
out <- 0
for(t in 2:n)
{
error <- rnorm(1)
error <- rho*out[t-1] + error
out <- c(out,error)
}
return(out)
}
},{
autoreg_fast <- function(n,rho)
{
out <- numeric(length = n)
out[1] <- 0
for(t in 2:n)
{
error <- rnorm(1)
error <- rho*out[t-1] + error
out[t] <- error
}
return(out)
}
},replications = 100)
benchmark({
autoreg(10000,0.6)
},{
autoreg_fast(10000,0.6)
},replications = 100)
benchmark({
autoreg(10000,0.6)
},{
autoreg_fast(10000,0.6)
},replications = 20)
A <- matrix(1:6,2,3)
A
x <- c(7,8)
A %*% x
x <- c(7,8,9)
A %*% x
A[1,] * A[2,]
sum(A[1,] * A[2,])
n <- 1000
m <- 1000
A <- matrix(runif(n*m),nrow = n,ncol = m)
B <- matrix(rnorm(n*m),nrow = n,ncol = m)
x <- runif(n)
ABtx_1 <- (A %*% t(B)) %*% x
ABtx_2 <- numeric(length = n)
for(i in 1:n)
{
nums <- numeric(length = n)
for(j in 1:n)
{
nums[j] <- A[i,]*B[j,]
}
ABtx_2[i] <- nums*x
}
warnings()
n <- 1000
m <- 1000
A <- matrix(runif(n*m),nrow = n,ncol = m)
B <- matrix(rnorm(n*m),nrow = n,ncol = m)
x <- runif(n)
ABtx_1 <- (A %*% t(B)) %*% x
ABtx_2 <- numeric(length = n)
for(i in 1:n)
{
nums <- numeric(length = n)
for(j in 1:n)
{
nums[j] <- sum(A[i,]*B[j,])
}
ABtx_2[i] <- nums*x
}
print(ABtx_1)
print(ABtx_2)
n <- 1000
m <- 1000
A <- matrix(runif(n*m),nrow = n,ncol = m)
B <- matrix(rnorm(n*m),nrow = n,ncol = m)
x <- runif(n)
ABtx_1 <- (A %*% t(B)) %*% x
ABtx_2 <- numeric(length = n)
for(i in 1:n)
{
nums <- numeric(length = n)
for(j in 1:n)
{
nums[j] <- sum(A[i,]*B[j,])
}
ABtx_2[i] <- nums*x
}
print(ABtx_1)
print(ABtx_2)
load("https://dvats.github.io/assets/data/data.Rdata")
load("https://dvats.github.io/assets/data/data.Rdata")
load(url("https://dvats.github.io/assets/data/data.Rdata"))
numberss <- load(url("https://dvats.github.io/assets/data/data.Rdata"))
load(url("https://dvats.github.io/assets/data/data.Rdata"))
func <- function()
{
load(url("https://dvats.github.io/assets/data/data.Rdata"))
num <- prod(dnorm(numberss,mean = 1,sd= 1))
den <- prod(dnorm(numberss,mean = 0,sd = 1))
ratio <- num/den
return(ratio)
}
func()
func <- function()
{
load(url("https://dvats.github.io/assets/data/data.Rdata"))
num <- prod(dnorm(numberss,mean = 1,sd= 1))
den <- prod(dnorm(numberss,mean = 0,sd = 1))
print(num)
print(den)
ratio <- num/den
return(ratio)
}
func()
num <- prod(dnorm(numberss,mean = 1,sd= 1))
den <- prod(dnorm(numberss,mean = 0,sd = 1))
func <- function()
{
load(url("https://dvats.github.io/assets/data/data.Rdata"))
num <- sum(log(dnorm(numberss,mean = 1,sd = 1)))
den <- sum(log(dnorm(numberss,mean = 0,sd = 1)))
print(exp(num))
print(exp(den))
ratio <- num/den
return(ratio)
}
func()
func <- function()
{
load(url("https://dvats.github.io/assets/data/data.Rdata"))
num <- sum(log(dnorm(numberss,mean = 1,sd = 1)))
den <- sum(log(dnorm(numberss,mean = 0,sd = 1)))
print(exp(num))
print(exp(den))
ratio <- num-den
return(ratio)
}
func()
func <- function()
{
load(url("https://dvats.github.io/assets/data/data.Rdata"))
num <- sum(log(dnorm(numberss,mean = 1,sd = 1)))
den <- sum(log(dnorm(numberss,mean = 0,sd = 1)))
print((num))
print((den))
ratio <- num-den
return(ratio)
}
func()
func <- function()
{
load(url("https://dvats.github.io/assets/data/data.Rdata"))
num <- sum(log(dnorm(numberss,mean = 1,sd = 1)))
den <- sum(log(dnorm(numberss,mean = 0,sd = 1)))
print((num))
print((den))
ratio <- num-den
return(exp(ratio))
}
func()
?sum
numberss
dnorm(numberss)
dnorm(numberss) <= 0
sum(dnorm(numberss) <= 0)
library(gapminder)
library(ggplot2)
gapminder
names(gapminder)
ggplot(data = gapminder,mapping = aes(x = gdpPercap,y = lifeExp)) +
geom_point(aes(colour = continent,size = pop))
ggplot(data = gapminder,mapping = aes(x = gdpPercap,y = lifeExp)) +
geom_point(aes(colour = continent,size = pop),alpha = 0.7)
ggplot(data = gapminder,mapping = aes(x = gdpPercap,y = lifeExp)) +
geom_point(aes(colour = continent,size = pop),alpha = 0.3)
ggplot(data = gapminder,mapping = aes(x = gdpPercap,y = lifeExp)) +
geom_point(aes(colour = continent,size = pop),alpha = 0.8) +
scale_color_viridis_d() +
scale_x_log10()
library(dplyr)
at <- gapminder %>% filter(continent == Asia || Europe)
dat <- gapminder %>% filter(continent == Asia | continent == Europe)
dat <- gapminder %>% filter(continent %in% c("Asia","Europe"))
dat <- gapminder %>% filter(continent %in% c("Asia","Europe"))
ggplot(data = dat,mapping = aes(x = gdpPercap,y = lifeExp)) +
geom_point(aes(colour = continent,size = pop),alpha = 0.8) +
scale_color_viridis_d() +
scale_x_log10()
dat <- gapminder %>% filter(continent %in% c("Asia","Europe"))
ggplot(data = dat,mapping = aes(x = gdpPercap,y = lifeExp)) +
geom_point(aes(colour = continent,size = pop),alpha = 0.7) +
scale_color_viridis_d() +
scale_x_log10()
?grid
?grid.arrange
library(gapminder)
library(ggplot2)
library(dplyr)
dat <- gapminder %>% filter(continent %in% c("Asia","Europe"))
ggplot(data = dat,mapping = aes(x = gdpPercap,y = lifeExp)) +
geom_point(aes(colour = continent,size = pop),alpha = 0.7) +
scale_color_viridis_d() +
scale_x_log10()
dat <- gapminder %>% filter(continent %in% c("Asia","Europe"))
ggplot(data = dat,mapping = aes(x = gdpPercap,y = lifeExp)) +
geom_point(aes(colour = continent,size = pop),alpha = 0.7) +
scale_color_viridis_d() +
scale_x_log10() +
labs(x = "GDP per capita",y = "Life Expectancy",title = "GDP per capita v/s life expectancy")
shiny::runApp('C:/Users/vinay/OneDrive/Desktop/courses/MTH208/Project')
runApp('C:/Users/vinay/OneDrive/Desktop/courses/MTH208/Project')
?apply
m<- 500
n <- 500
mat <- matrix(runif(m*n),m,n)
mean1 <- colMeans(mat)
fun <- function(colm)
{
return(mean(colm))
}
mean2 <- apply(mat, 2, fun(col))
# Practise
m<- 500
n <- 500
mat <- matrix(runif(m*n),m,n)
mean1 <- colMeans(mat)
fun <- function(colm)
{
return(mean(colm))
}
mean2 <- apply(mat, 2, fun())
# Practise
m<- 500
n <- 500
mat <- matrix(runif(m*n),m,n)
mean1 <- colMeans(mat)
fun <- function(colm)
{
return(mean(colm))
}
mean2 <- apply(mat, 2, fun)
library(rbenchmark)
m<- 500
n <- 500
mat <- matrix(runif(m*n),m,n)
mean1 <- colMeans(mat)
fun <- function(colm)
{
return(mean(colm))
}
mean2 <- apply(mat, 2, fun)
benchmark({
mean1 <- colMeans(mat)
},{
fun <- function(colm)
{
return(mean(colm))
}
mean2 <- apply(mat, 2, fun)
},replications = 20)
func <- function(vec)
{
n <- length(vec)
# for tracking sum and log
sum.log <- 0
log.of.vec <- numeric(length(n))
# calculating logs and sum for each element
for(i in 1:n)
{
log.of.vec[i] <- log(vec[i])
sum.log <- sum.log + log.of.vec[i]
}
# fraction
frac <- log.of.vec/sum.log
return(frac)
}
func2 <- function(vec)
{
n <- length(vec)
# for tracking sum and log
log.of.vec <- log(vec)
# fraction
frac <- log.of.vec/sum(log.of.vec)
return(frac)
}
ans1 <- func(1:1e4)
ans2 <- func2(1:1e4)
library(rbenchmark)
func <- function(vec)
{
n <- length(vec)
# for tracking sum and log
sum.log <- 0
log.of.vec <- numeric(length(n))
# calculating logs and sum for each element
for(i in 1:n)
{
log.of.vec[i] <- log(vec[i])
sum.log <- sum.log + log.of.vec[i]
}
# fraction
frac <- log.of.vec/sum.log
return(frac)
}
func2 <- function(vec)
{
n <- length(vec)
# for tracking sum and log
log.of.vec <- log(vec)
# fraction
frac <- log.of.vec/sum(log.of.vec)
return(frac)
}
benchmark({
func(1:1e4)
},{
func2(1:1e4)
},replications = 20)
benchmark({
func(1:1e4)
},{
func2(1:1e4)
},replications = 10)
benchmark({
func(1:1e4)
},{
func2(1:1e4)
})
rm(list = ls())
setwd("C:/Users/vinay/OneDrive/Desktop/courses/MTH208/R-project/Data")
load("athleteEvents.Rdata")
library(shiny); runApp('C:/Users/vinay/AppData/Local/Microsoft/Windows/INetCache/IE/7DOSGNMC/app[1].R')
source("sex_ratio.R")
female_athletes_data <- athleteEvents %>% filter(Sex == "F")
female_medals <- female_athletes_data %>% group_by(Team) %>% summarise(Total = sum(Medal,na.rm = TRUE))
female_medals <- female_athletes_data %>% group_by(Team) %>% summarise(Total = sum(Medal,na.rm = TRUE) || 0)
View(female_athletes_data)
female_medals <- female_athletes_data %>% group_by(Team) %>% summarise(Total = sum(Medal,replace_na(0)))
female_medals <- female_athletes_data %>% group_by(Team) %>% summarise(Total = sum(Medal,replace_na(Medal,0)))
female_medals <- female_athletes_data %>% group_by(Team) %>% summarise(Total = sum(Medal,Medal[is.na(Medal)] <- 0))
female_medals <- female_athletes_data %>% filter(!is.na(Medal)) %>% group_by(Team) %>% summarise(Total = sum(Medal))
male_medals <- female_athletes_data %>% filter(!is.na(Medal)) %>% group_by(Team) %>% summarise(Total = sum(Medal,na.rm = TRUE))
female_athletes_data <- female_athletes_data %>%
mutate(Medal = case_when(
Medal == "Bronze" ~ 1,
Medal == "Silver" ~ 2,
Medal == "Gold" ~ 3,
))
female_medals <- female_athletes_data %>% filter(!is.na(Medal)) %>% group_by(Team) %>% summarise(Total = sum(Medal>0,na.rm = TRUE))
filtered_sexRatio_dataset <- sex_ratio_data %>%
filter(`Country/region` %in% female_medals$Team)
filtered_femaleMedal_dataset <-  female_medals %>% filter(Team %in% filtered_sexRatio_dataset$`Country/region`)
runApp('C:/Users/vinay/AppData/Local/Microsoft/Windows/INetCache/IE/7DOSGNMC/app[1].R')
ggplot(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset)) +
geom_point()
ggplot(data = filtered_femaleMedal_dataset ,mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset)) +
geom_point()
ggplot() +
geom_point(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset))
ggplot() +
geom_point(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total))
ggplot() +
geom_point(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total)) +
coord_cartesian(xlim = c(0.5,1.2))
ggplot() +
geom_point(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total)) +
coord_cartesian(xlim = c(0.9,1.2))
ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total)) +
coord_cartesian(xlim = c(0.9,1.2))
ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total)) +
coord_cartesian(xlim = c(1,1.2))
sexRatioPlot <- ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total,text = filtered_femaleMedal_dataset$Team)) +
coord_cartesian(xlim = c(1,1.2))
sexRatioPlot <- ggplotly(sexRatioPlot,tooltip = "text")
library(ggplotly)
ggplotly
install.packages("ggplotly")
sexRatioPlot <- ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total,text = filtered_femaleMedal_dataset$Team)) +
coord_cartesian(xlim = c(1,1.2))
sexRatioPlot <- ggplotly(sexRatioPlot,tooltip = "text")
p <- ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total,text = filtered_femaleMedal_dataset$Team)) +
coord_cartesian(xlim = c(1,1.2))
sexRatioPlot <- ggplotly(p,tooltip = "text")
library(plotly)
p <- ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total,text = filtered_femaleMedal_dataset$Team)) +
coord_cartesian(xlim = c(1,1.2))
sexRatioPlot <- ggplotly(p,tooltip = "text")
sexRatioPlot
p <- ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total,text = filtered_femaleMedal_dataset$Team),color = "purple") +
coord_cartesian(xlim = c(1,1.2))+
labs(x = "Sex ratio of different countries", y = "Medals won by Women in different countries",title = "No. of medals won v/s Sex Ratio",subtitle = "Sex ratio seems to not affect much for women olympic participation")
sexRatioPlot <- ggplotly(p,tooltip = "text")
sexRatioPlot
p <- ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total,text = filtered_femaleMedal_dataset$Team),color = "purple") +
coord_cartesian(xlim = c(1,1.2))+
labs(x = "Sex ratio of different countries", y = "Medals won by Women",title = "No. of medals won v/s Sex Ratio",subtitle = "Sex ratio seems to not affect much for women olympic participation")
sexRatioPlot <- ggplotly(p,tooltip = "text")
sexRatioPlot
p <- ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total,text = filtered_femaleMedal_dataset$Team),color = "purple",alpha = 0.8) +
coord_cartesian(xlim = c(1,1.2))+
labs(x = "Sex ratio of different countries", y = "Medals won by Women",title = "No. of medals won v/s Sex Ratio",subtitle = "Sex ratio seems to not affect much for women olympic participation")
sexRatioPlot <- ggplotly(p,tooltip = "text")
sexRatioPlot
runApp('C:/Users/vinay/AppData/Local/Microsoft/Windows/INetCache/IE/7DOSGNMC/app[1].R')
p <- ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total,text = filtered_femaleMedal_dataset$Team),color = "purple",alpha = 0.8) +
coord_cartesian(xlim = c(1,1.2))+
labs(x = "Sex ratio of different countries", y = "Medals won by Women",title = "No. of medals won v/s Sex Ratio",subtitle = "Sex ratio seems to not affect much for women olympic participation")
sexRatioPlot <- ggplotly(p,tooltip = "text")
sexRatioPlot
##
# Plotting sexRatio Plot using plotly
p <- ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total,text = filtered_femaleMedal_dataset$Team),color = "purple",alpha = 0.8) +
coord_cartesian(xlim = c(1,1.2))+
labs(x = "Sex ratio of different countries", y = "Medals won by Women",title = "No. of medals won v/s Sex Ratio",subtitle = "Sex ratio seems to not affect much for women olympic participation")
# Convert to plotly object
sexRatioPlot <- ggplotly(p, tooltip = "text")
# Add subtitle manually
sexRatioPlot <- sexRatioPlot %>%
layout(title = list(text = "No. of medals won v/s Sex Ratio<br><sup>Sex ratio seems to not affect much for women olympic participation</sup>"))
sexRatioPlot
female_medals <- female_athletes_data %>% filter(!is.na(Medal)) %>% group_by(Team) %>% summarise(Total = sum(Medal>0,na.rm = TRUE)) %>% select(Team,Medal,Total)
# Plotting sexRatio Plot using plotly
p <- ggplot() +
geom_jitter(mapping = aes(x = filtered_sexRatio_dataset$`15–24 years`,y = filtered_femaleMedal_dataset$Total,text = filtered_femaleMedal_dataset$Team),color = female_athletes_data$Medal,alpha = 0.8) +
coord_cartesian(xlim = c(1,1.2))+
labs(x = "Sex ratio of different countries", y = "Medals won by Women",title = "No. of medals won v/s Sex Ratio",subtitle = "Sex ratio seems to not affect much on women olympic participation")
# Convert to plotly object
sexRatioPlot <- ggplotly(p, tooltip = "text")
female_medals <- female_athletes_data %>% filter(!is.na(Medal)) %>% group_by(Team) %>% summarise(Total = sum(Medal>0,na.rm = TRUE)) %>% select(Team,Medal,Total)
# removing NA from Medals grouped By Team
female_medals <- female_athletes_data %>% filter(!is.na(Medal)) %>% group_by(Team) %>% summarise(Total = sum(Medal>0,na.rm = TRUE)) %>% select(Team,Medal,Total)
female_athletes_data %>% filter(!is.na(Medal))
female_athletes_data %>% filter(!is.na(Medal)) %>% group_by(Team)
female_athletes_data %>% filter(!is.na(Medal)) %>% group_by(Team) %>% summarise(Total = sum(Medal>0,na.rm = TRUE))
# filtering the data of males
male_athletes_data <- athleteEvents %>% filter(Sex == "M")
# Converting Bronze to 1,Silver to 2 and Gold to 3
male_athletes_data <- male_athletes_data %>%
mutate(Medal = case_when(
Medal == "Bronze" ~ 1,
Medal == "Silver" ~ 2,
Medal == "Gold" ~ 3,
))
# removing NA from Medals grouped By Team
male_medals <- male_athletes_data %>% filter(!is.na(Medal)) %>% group_by(Team) %>% summarise(Total = sum(Medal>0,na.rm = TRUE))
# Plotting sexRatio Plot using plotly
p <- ggplot() +
geom_jitter(mapping = aes(x = female_athletes_data$Year,y = c(male_medals$Total,female_medals$Total),text = male_medals$Team),color = athleteEvents$Sex,alpha = 0.8) +
coord_cartesian(xlim = c(1,1.2))+
labs(x = "Sex ratio of different countries", y = "Medals won by Women",title = "No. of medals won v/s Sex Ratio",subtitle = "Sex ratio seems to not affect much on women olympic participation")
p
