theme_minimal() +
theme(
panel.background = element_rect(fill = "#343138", color = "white"),
plot.background = element_rect(fill = "#343138", color = "white"),
legend.background = element_rect(fill = "#343138", color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"),
plot.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white")
)
# Convert to plotly
gdpPlot <- ggplotly(gdp_plot, tooltip = "text")
gdpPlot
# Handling Data
library(dplyr)
library(reshape2)
library(ggplot2)
load("OlympicMedals.Rdata")
load("OlympicAthletes.Rdata")
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
medalDat <- olympics %>% select(Medal,Country,Year) %>%
group_by(Country) %>%
summarise( Gold = sum(Medal == "Gold", na.rm = TRUE),
Silver = sum(Medal == "Silver", na.rm = TRUE),
Bronze = sum(Medal == "Bronze", na.rm = TRUE),
Total = Gold + Silver + Bronze ) %>% arrange(desc(Total))
top_vals <- medalDat %>% head(10)
# Convert the data to long format
top_vals <- top_vals %>% select(Country,Gold,Silver,Bronze)
top_vals_long <- melt(top_vals, id.vars = "Country", variable.name = "Medal", value.name = "Count")
# Set the factor levels for Country based on the sorted order
top_vals_long$Country <- factor(top_vals_long$Country, levels = top_vals$Country)
# Create the stacked bar plot
medals_plot <- ggplot(data = top_vals_long, aes(x = Country, y = Count, fill = Medal)) +
geom_bar(stat = "identity", alpha = 0.7) +
scale_fill_manual(values = c("Gold" = "#FFD700", "Silver" = "#D7D7D7", "Bronze" = "#CC6600")) +
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#343138", color = "white"),
plot.background = element_rect(fill = "#343138", color = "white"),
legend.background = element_rect(fill = "#343138", color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"),
plot.title = element_text(color = "white"),
axis.text.x = element_text(angle = 30, hjust = 1),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white")
) + labs(x = "Country", y = "Medals", title = "Medals won by top 10 countries(1896-2016)")
medals_plot
medals_plot <- ggplot(data = top_vals_long, aes(x = Country, y = Count, fill = Medal)) +
geom_bar(stat = "identity", alpha = 0.7) +
scale_fill_manual(values = c("Gold" = "#FFD700", "Silver" = "#D7D7D7", "Bronze" = "#CC6600")) +
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#343138", color = "white"),
plot.background = element_rect(fill = "#343138", color = "white"),
legend.background = element_rect(fill = "#343138", color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"),
plot.title = element_text(color = "white"),
axis.text.x = element_text(angle = 30, hjust = 1),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white")
) + labs(x = "Country", y = "Medals", title = "Medals won by top 10 countries(1896-2016)")
medals_plot
# Sex Ratio plot
library(ggplot2)
library(plotly)
library(dplyr)
load("SexRatio.Rdata")
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
colnames(sex_ratio_data)[1] = "Country"
genderOlympDat <- olympics %>% select(Sex,Country,Year,Medal) %>% filter(Sex == "F")
genderOlympDat <- genderOlympDat %>% group_by(Country) %>%
summarise( Gold = sum(Medal == "Gold", na.rm = TRUE),
Silver = sum(Medal == "Silver", na.rm = TRUE),
Bronze = sum(Medal == "Bronze", na.rm = TRUE),
Total = Gold + Silver + Bronze ) %>%
arrange(desc(Total))
gender_df <- genderOlympDat %>%
inner_join(sex_ratio_data, by = 'Country') %>%
mutate(TotalMedals = ifelse(Total.x >= mean(Total.x), "Above Average", "Below Average"))
# Create the plot
gend_plot <- ggplot(gender_df) +
geom_jitter(aes(x = Total.y, y = Total.x, color = TotalMedals,text = Country)) +
scale_color_manual(values = c("Above Average" = "#F39F5A", "Below Average" = "#AE445A")) +
coord_cartesian(xlim = c(0.8,1.6)) +
scale_y_log10() +
labs(title = "Total Medals Won by Females (Country-wise)", x = "Sex Ratio", y = "Total Medals") +
theme_minimal() +
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#343138", color = "white"),
plot.background = element_rect(fill = "#343138", color = "white"),
legend.background = element_rect(fill = "#343138", color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"),
plot.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white")
)
gender_plot <- ggplotly(gend_plot,tooltip = "text")
gender_plot
# Create the box plots
ggplot(gdpDat, aes(y = GDP_category, x = Total)) +
geom_boxplot(aes(fill = GDP_category)) +
scale_x_log10() +
theme_minimal() +
labs(title = "Total Medals by GDP Category", y = "GDP Category", x = "Total Medals") +
theme_minimal() + theme(
panel.grid = element_blank()
)
# life expectancy plot
library(dplyr)
library(ggplot2)
library(plotly)
load("Lifeexp.Rdata")
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
lifeExpDat <- olympics %>%
filter(Sex == "F") %>%
group_by(Country) %>%
summarise( Gold = sum(Medal == "Gold", na.rm = TRUE),
Silver = sum(Medal == "Silver", na.rm = TRUE),
Bronze = sum(Medal == "Bronze", na.rm = TRUE),
Total = Gold + Silver + Bronze ) %>%
arrange(desc(Total)) %>%
inner_join(life_expectancy_data,by = 'Country')
lifeexp_plot <- ggplot(data = lifeExpDat,aes(x = `Females  Life Expectancy`, y = Total,text = Country)) +
geom_point(col = "#F39F5A") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
scale_x_continuous(limits = c(60, 100)) +
scale_y_continuous(limits = c(1, 1000)) +
scale_y_log10() +
labs(title = "Total Medals Won by Females (Country-wise)", x = "Life Expectancy of females", y = "Total Medals") +
theme_minimal() +
theme(
panel.grid = element_blank(),
panel.background = element_rect(fill = "#343138", color = "white"),
plot.background = element_rect(fill = "#343138", color = "white"),
legend.background = element_rect(fill = "#343138", color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"),
plot.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white")
)
lifeExpPlot <- ggplotly(lifeexp_plot,tooltip = "text")
lifeExpPlot
load("WomeninPower.Rdata")
colnames(t1) <- t1[1,]
t1 <- t1[-1,]
runApp('C:/Users/vinay/AppData/Local/Microsoft/Windows/INetCache/IE/HFU481FP/app[1].R')
runApp('C:/Users/vinay/OneDrive/Desktop/courses/MTH208/Project')
runApp('C:/Users/vinay/AppData/Local/Microsoft/Windows/INetCache/IE/HFU481FP/app[1].R')
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
count_dat <- olympics %>% filter(Country == "United States")
count_dat <- olympics %>% filter(Country == "United States") %>%
group_by(Sport)
country_dat <- olympics %>% filter(Country == "United States")
ggplot(data = country_dat,aes(x = Year,y = Sport)) +
geom_point()
country_dat <- olympics %>% filter(Country == "India")
ggplot(data = country_dat,aes(x = Year,y = Sport)) +
geom_point()
country_dat <- olympics %>% filter(Country == "United States")
ggplot(data = country_dat,aes(x = Year,y = Sport)) +
geom_point()
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
count_dat <- olympics %>% filter(Country == "United States")
count_dat <- olympics %>% filter(Country == "United States") %>%
+   group_by(Sport)
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
count_dat <- olympics %>% filter(Country == "United States")
count_dat <- olympics %>% filter(Country == "United States") %>%
group_by(Sport)
country_dat <- olympics %>% filter(Country == "United States")
ggplot(data = country_dat,aes(x = Year,y = Sport)) +
geom_point()
country_dat <- olympics %>% filter(Country == "India")
ggplot(data = country_dat,aes(x = Year,y = Sport)) +
geom_point()
country_dat <- olympics %>% filter(Country == "United States")
ggplot(data = country_dat,aes(x = Year,y = Sport)) +
geom_point()
NOCs <- read_csv("nocRegions.csv", col_types = cols(
NOC = col_character(),
region = col_character()
))
dataOlympics <- read_csv("athleteEvents.csv", col_types = cols(
ID = col_character(),
Name = col_character(),
Sex = col_factor(levels = c("M","F")),
Age =  col_integer(),
Height = col_double(),
Weight = col_double(),
Team = col_character(),
NOC = col_character(),
Games = col_character(),
Year = col_integer(),
Season = col_factor(levels = c("Summer","Winter")),
City = col_character(),
Sport = col_character(),
Event = col_character(),
Medal = col_factor(levels = c("Gold","Silver","Bronze"))
)
)
library("gganimate")
library("data.table")
library("knitr")
library("gridExtra")
library("tidyverse")
library("plotly")
dataOlympics <- read_csv("athleteEvents.csv", col_types = cols(
ID = col_character(),
Name = col_character(),
Sex = col_factor(levels = c("M","F")),
Age =  col_integer(),
Height = col_double(),
Weight = col_double(),
Team = col_character(),
NOC = col_character(),
Games = col_character(),
Year = col_integer(),
Season = col_factor(levels = c("Summer","Winter")),
City = col_character(),
Sport = col_character(),
Event = col_character(),
Medal = col_factor(levels = c("Gold","Silver","Bronze"))
)
)
# REQUIRED LIBRARIES
library("gganimate")
library("data.table")
library("knitr")
library("gridExtra")
library("tidyverse")
library("plotly")
# LOAD ATHLETES EVENTS DATA
dataOlympics <- read_csv("athleteEvents.csv", col_types = cols(
ID = col_character(),
Name = col_character(),
Sex = col_factor(levels = c("M","F")),
Age =  col_integer(),
Height = col_double(),
Weight = col_double(),
Team = col_character(),
NOC = col_character(),
Games = col_character(),
Year = col_integer(),
Season = col_factor(levels = c("Summer","Winter")),
City = col_character(),
Sport = col_character(),
Event = col_character(),
Medal = col_factor(levels = c("Gold","Silver","Bronze"))
)
)
medalCounts <- olympics %>% filter(!is.na(Medal))%>%
group_by(NOC, Medal, Event, Games) %>%
summarize(isMedal=1)
medalCounts <-  medalCounts %>%
group_by(NOC, Medal) %>%
summarize(Count= sum(isMedal))
medalCounts <- left_join(medalCounts, NOCs, by= "NOC" ) %>%
select(region, NOC, Medal, Count)
medalCounts <- medalCounts %>%
group_by(region) %>%
summarize(Total=sum(Count))
data_regions <- medalCounts %>%
left_join(NOCs,by="region") %>%
filter(!is.na(region))
earth <- map_data("world")
earth <- left_join(earth, data_regions, by="region")
plotMapMedals <- ggplot(earth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = Total, label= region)) +
labs(x = "", y = "",
title="Map of nations with the most medals won",
subtitle = "Olympic Games from 1896 to 2016") +
guides(fill=guide_colourbar(title="medals")) +
scale_fill_gradient(low="white",high="gold3")
plotMapMedals
ggplotly(plotMapMedals)
plotMapMedals <- ggplot(earth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = Total, label= region)) +
labs(x = "", y = "",
title="Map of nations with the most medals won",
subtitle = "Olympic Games from 1896 to 2016") +
guides(fill=guide_colourbar(title="medals")) +
scale_fill_gradient(low="white",high="gold3")
plotMapMedals
ggplotly(plotMapMedals)
# Handling Data
library(dplyr)
library(reshape2)
library(ggplot2)
load("OlympicMedals.Rdata")
load("OlympicAthletes.Rdata")
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
medalDat <- olympics %>% select(Medal,Country,Year) %>%
group_by(Country) %>%
summarise( Gold = sum(Medal == "Gold", na.rm = TRUE),
Silver = sum(Medal == "Silver", na.rm = TRUE),
Bronze = sum(Medal == "Bronze", na.rm = TRUE),
Total = Gold + Silver + Bronze ) %>% arrange(desc(Total))
top_vals <- medalDat %>% head(10)
# Convert the data to long format
top_vals <- top_vals %>% select(Country,Gold,Silver,Bronze)
top_vals_long <- melt(top_vals, id.vars = "Country", variable.name = "Medal", value.name = "Count")
# Set the factor levels for Country based on the sorted order
top_vals_long$Country <- factor(top_vals_long$Country, levels = top_vals$Country)
# Create the stacked bar plot
medals_plot <- ggplot(data = top_vals_long, aes(x = Country, y = Count, fill = Medal)) +
geom_bar(stat = "identity", alpha = 0.7) +
scale_fill_manual(values = c("Gold" = "#FFD700", "Silver" = "#D7D7D7", "Bronze" = "#CC6600")) +
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#343138", color = "white"),
plot.background = element_rect(fill = "#343138", color = "white"),
legend.background = element_rect(fill = "#343138", color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"),
plot.title = element_text(color = "white"),
axis.text.x = element_text(angle = 30, hjust = 1),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white")
) + labs(x = "Country", y = "Medals", title = "Medals won by top 10 countries(1896-2016)")
medals_plot
# Sex Ratio plot
library(ggplot2)
library(plotly)
library(dplyr)
load("SexRatio.Rdata")
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
colnames(sex_ratio_data)[1] = "Country"
genderOlympDat <- olympics %>% select(Sex,Country,Year,Medal) %>% filter(Sex == "F")
genderOlympDat <- genderOlympDat %>% group_by(Country) %>%
summarise( Gold = sum(Medal == "Gold", na.rm = TRUE),
Silver = sum(Medal == "Silver", na.rm = TRUE),
Bronze = sum(Medal == "Bronze", na.rm = TRUE),
Total = Gold + Silver + Bronze ) %>%
arrange(desc(Total))
gender_df <- genderOlympDat %>%
inner_join(sex_ratio_data, by = 'Country') %>%
mutate(TotalMedals = ifelse(Total.x >= mean(Total.x), "Above Average", "Below Average"))
# Create the plot
gend_plot <- ggplot(gender_df) +
geom_jitter(aes(x = Total.y, y = Total.x, color = TotalMedals,text = Country)) +
scale_color_manual(values = c("Above Average" = "#F39F5A", "Below Average" = "#AE445A")) +
coord_cartesian(xlim = c(0.8,1.6)) +
scale_y_log10() +
labs(title = "Total Medals Won by Females (Country-wise)", x = "Sex Ratio", y = "Total Medals") +
theme_minimal() +
theme( panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#343138", color = "white"),
plot.background = element_rect(fill = "#343138", color = "white"),
legend.background = element_rect(fill = "#343138", color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"),
plot.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white")
)
gender_plot <- ggplotly(gend_plot,tooltip = "text")
gender_plot
# GDP plot
library(ggplot2)
library(plotly)
library(dplyr)
load("NominalGDP.Rdata")
gdp_data <- gdp_data %>% select(Country,`2016`)
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
gdpDat <- olympics %>%
filter(Sex == "F") %>%
group_by(Country) %>%
summarise( Gold = sum(Medal == "Gold", na.rm = TRUE),
Silver = sum(Medal == "Silver", na.rm = TRUE),
Bronze = sum(Medal == "Bronze", na.rm = TRUE),
Total = Gold + Silver + Bronze ) %>%
arrange(desc(Total)) %>%
inner_join(gdp_data,by = 'Country') %>%
mutate(GDP_category = ifelse(`2016` >= mean(`2016`), "Above Average", "Below Average"))
gdpDat$Custom_Color <- ifelse(gdpDat$Country == "India", "green", ifelse(gdpDat$GDP_category == "Above Average", "#F39F5A", "#AE445A"))
# Create the plot
gdp_plot <- ggplot(gdpDat) +
geom_jitter(aes(x = `2016`, y = Total, color = Custom_Color, text = Country)) +
scale_x_log10() +
scale_color_identity() +
labs(title = "Total Medals Won by Females (Country-wise)", x = "Nominal GDP", y = "Total Medals") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "#343138", color = "white"),
plot.background = element_rect(fill = "#343138", color = "white"),
legend.background = element_rect(fill = "#343138", color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"),
plot.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white")
)
# Convert to plotly
gdpPlot <- ggplotly(gdp_plot, tooltip = "text")
gdpPlot
# Create the box plots
ggplot(gdpDat, aes(y = GDP_category, x = Total)) +
geom_boxplot(aes(fill = GDP_category)) +
scale_x_log10() +
theme_minimal() +
labs(title = "Total Medals by GDP Category", y = "GDP Category", x = "Total Medals") +
theme_minimal() + theme(
panel.grid = element_blank()
)
# life expectancy plot
library(dplyr)
library(ggplot2)
library(plotly)
load("Lifeexp.Rdata")
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
lifeExpDat <- olympics %>%
filter(Sex == "F") %>%
group_by(Country) %>%
summarise( Gold = sum(Medal == "Gold", na.rm = TRUE),
Silver = sum(Medal == "Silver", na.rm = TRUE),
Bronze = sum(Medal == "Bronze", na.rm = TRUE),
Total = Gold + Silver + Bronze ) %>%
arrange(desc(Total)) %>%
inner_join(life_expectancy_data,by = 'Country')
lifeexp_plot <- ggplot(data = lifeExpDat,aes(x = `Females  Life Expectancy`, y = Total,text = Country)) +
geom_point(col = "#F39F5A") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
scale_x_continuous(limits = c(60, 100)) +
scale_y_continuous(limits = c(1, 1000)) +
scale_y_log10() +
labs(title = "Total Medals Won by Females (Country-wise)", x = "Life Expectancy of females", y = "Total Medals") +
theme_minimal() +
theme(
panel.grid = element_blank(),
panel.background = element_rect(fill = "#343138", color = "white"),
plot.background = element_rect(fill = "#343138", color = "white"),
legend.background = element_rect(fill = "#343138", color = "white"),
axis.title.x = element_text(color = "white"),
axis.title.y = element_text(color = "white"),
plot.title = element_text(color = "white"),
axis.text = element_text(color = "white"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white")
)
lifeExpPlot <- ggplotly(lifeexp_plot,tooltip = "text")
lifeExpPlot
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
country_dat <- olympics %>% filter(Country == "India")
ggplot(data = country_dat,aes(x = Year,y = Sport)) +
geom_point()
country_dat <- olympics %>% filter(Country == "India")
ggplot(data = country_dat,aes(x = Year,y = Sport)) +
geom_point()
country_dat <- olympics %>% filter(Country == "United States")
ggplot(data = country_dat,aes(x = Year,y = Sport)) +
geom_point()
olympics <- read.csv("athleteEvents.csv")
colnames(olympics)[colnames(olympics) == "Team"] = "Country"
country_dat <- olympics %>% filter(Country == "India")
ggplot(data = country_dat,aes(x = Year,y = Sport)) +
geom_point()
# MAP NATIONS WITH MOST MEDALS WON
medalCounts <- olympics %>% filter(!is.na(Medal))%>%
group_by(NOC, Medal, Event, Games) %>%
summarize(isMedal=1)
medalCounts <-  medalCounts %>%
group_by(NOC, Medal) %>%
summarize(Count= sum(isMedal))
medalCounts <- left_join(medalCounts, NOCs, by= "NOC" ) %>%
select(region, NOC, Medal, Count)
medalCounts <- medalCounts %>%
group_by(region) %>%
summarize(Total=sum(Count))
data_regions <- medalCounts %>%
left_join(NOCs,by="region") %>%
filter(!is.na(region))
earth <- map_data("world")
earth <- left_join(earth, data_regions, by="region")
# PLOT MAP
plotMapMedals <- ggplot(earth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = Total, label= region)) +
labs(x = "", y = "",
title="Map of nations with the most medals won",
subtitle = "Olympic Games from 1896 to 2016") +
guides(fill=guide_colourbar(title="medals")) +
scale_fill_gradient(low="white",high="gold3")
plotMapMedals
ggplotly(plotMapMedals)
